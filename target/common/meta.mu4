( $Id$

  This file is part of muforth.

  Copyright 1997-2004 David Frech. All rights reserved, and all wrongs
  reversed.

  Licensed under the Apache License, Version 2.0 [the "License"];
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  or see the file LICENSE in the top directory of this distribution.

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.)

( meta.mu4 - bits common to all metacompiler targets)

( daf & rst. whatever)
( daf 2001-feb-02. Created, from v25 version.)
( daf 2002-apr-01. Converted to muforth.)

cr " Meta compiler common"  file[#

forth  decimal

( Metacompiler vocabs)
chain .machine.  ( words specific to a target machine)
chain .outside.  ( used outside of target definitions - the `meta' forth)
chain .inside.   ( used inside target definitions - the `meta' compiler)
chain .asm.      ( the host-resident target assembler)
chain .target.   ( the target words - like `forth' on the host)

: machine   .machine. definitions ;
: outside   .outside. definitions ;
: inside     .inside. definitions ;
: asm           .asm. definitions ;
: target     .target. definitions ;

compiler
: \m   ( compile from machine)  .machine. \chain ;
: \o   ( compile from outside)  .outside. \chain ;
: \i   ( compile from inside)    .inside. \chain ;
: \a   ( compile from asm)          .asm. \chain ;
: \t   ( compile from target)    .target. \chain ;

forth
: \   .outside. chain' execute ;  ( escape to meta - find and execute a word) 

outside
: \     .forth. chain' execute ;  ( escape to forth - find and execute a word)


( Random useful goodies.)
: hex      hex  ;
: decimal  decimal  ;
: octal    octal  ;
: .     .  ;
: u.    u.  ;
: .s    .s  ;

: (     \f (  ;
: char  \f char  ;
: ."    \f ."  ;
: "     \f "  ;

: cr    cr  ;
: file[   file[  ;
: ]file   ]file  ;
: ld     ld  ;

forth

#]file
