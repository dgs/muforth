( This file is part of muFORTH: http://pages.nimblemachines.com/muforth

  Copyright 2002-2008 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

" AVR memory image " file[#

( Space for compiling into. AVRs can get big; for now let's limit ourselves
  to 64k address space. Since the program space is word-addressed, this
  means 32k words.)

( Let's make this less ARM/x86 specific.)
variable |cell
defer |c@
defer |@

64 Ki constant #image  ( this is as big as it can get!)
#image buffer 'image
: |+  'image + ;

-:  |+ c@ ;                                  is |c@
-:  dup |c@ ( low)  swap 1+ |c@ 8 << or ;    is |@
2 |cell !  ( size of cell)

: |c!  |+ c! ;
: |!  ( w a)  push  dup r@ |c!  8 >> pop 1+ |c! ;

( Dictionary operators.)
variable |h	( image dictionary pointer)

: |aligned  1 + -2 and ;
: |align  |h @ |aligned |h ! ;

: |here  ( - a)  |h @  ;
: |c,    ( ch)   |here |c!  1 |h +!  ;
: |,     ( n)    |align  dup |c,  8 >> |c, ;
                         ( little-endian! is this right for AVR?)
: |#     ( - n)  |here |+  'image -  ;  ( return the number of bytes in image)

( Initialization.)
: wipe      'image  #image  ( erase)   "55  fill  ;
: org   ( buffer len org)  nip nip  ( for now)  |h ! ;

wipe  'image #image  0  org

#]file

